{"ast":null,"code":"var _jsxFileName = \"/home/reneknox/Desktop/trivia/frontend/src/components/QuestionView.js\";\nimport React, { Component } from 'react';\nimport '../stylesheets/App.css';\nimport Question from './Question';\nimport Search from './Search';\nimport $ from 'jquery';\n\nclass QuestionView extends Component {\n  constructor() {\n    super();\n\n    this.getQuestions = () => {\n      $.ajax({\n        url: \"/questions?page=\".concat(this.state.page),\n        type: \"GET\",\n        success: result => {\n          let questionsList = Object.keys(result.total_questions).map(key => [Number(key), result.total_questions[key]]);\n          let categoriesList = Object.keys(result.categories).map(key => [Number(key), result.categories[key]]);\n          this.setState({\n            questions: result.questions,\n            totalQuestions: questionsList,\n            categories: categoriesList,\n            currentCategory: result.current_category\n          });\n          return;\n        },\n        error: error => {\n          alert('Unable to load questions. Please try your request again');\n          return;\n        }\n      });\n    };\n\n    this.getByCategory = id => {\n      $.ajax({\n        url: \"/categories/\".concat(id, \"/questions\"),\n        //TODO: update request URL\n        type: \"GET\",\n        success: result => {\n          this.setState({\n            questions: result.questions,\n            totalQuestions: result.total_questions,\n            currentCategory: result.current_category\n          });\n          return;\n        },\n        error: error => {\n          alert('Unable to load questions. Please try your request again');\n          return;\n        }\n      });\n    };\n\n    this.submitSearch = searchTerm => {\n      $.ajax({\n        url: \"/questions\",\n        //TODO: update request URL\n        type: \"POST\",\n        dataType: 'json',\n        contentType: 'application/json',\n        data: JSON.stringify({\n          searchTerm: searchTerm\n        }),\n        xhrFields: {\n          withCredentials: true\n        },\n        crossDomain: true,\n        success: result => {\n          this.setState({\n            questions: result.questions,\n            totalQuestions: result.total_questions,\n            currentCategory: result.current_category\n          });\n          return;\n        },\n        error: error => {\n          alert('Unable to load questions. Please try your request again');\n          return;\n        }\n      });\n    };\n\n    this.questionAction = id => action => {\n      if (action === 'DELETE') {\n        if (window.confirm('are you sure you want to delete the question?')) {\n          $.ajax({\n            url: \"/questions/\".concat(id),\n            //TODO: update request URL\n            type: \"DELETE\",\n            success: result => {\n              this.getQuestions();\n            },\n            error: error => {\n              alert('Unable to load questions. Please try your request again');\n              return;\n            }\n          });\n        }\n      }\n    };\n\n    this.state = {\n      questions: [],\n      page: 1,\n      totalQuestions: 0,\n      categories: {},\n      currentCategory: null\n    };\n  }\n\n  componentDidMount() {\n    this.getQuestions();\n  }\n\n  selectPage(num) {\n    this.setState({\n      page: num\n    }, () => this.getQuestions());\n  }\n\n  createPagination() {\n    let pageNumbers = [];\n    let maxPage = Math.ceil(this.state.totalQuestions / 10);\n\n    for (let i = 1; i <= maxPage; i++) {\n      pageNumbers.push(React.createElement(\"span\", {\n        key: i,\n        className: \"page-num \".concat(i === this.state.page ? 'active' : ''),\n        onClick: () => {\n          this.selectPage(i);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      }, i));\n    }\n\n    return pageNumbers;\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"question-view\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"categories-list\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      onClick: () => {\n        this.getQuestions();\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }, \"Categories\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, Object.keys(this.state.categories).map(id => React.createElement(\"li\", {\n      key: id,\n      onClick: () => {\n        this.getByCategory(id);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }, this.state.categories[id], React.createElement(\"img\", {\n      className: \"category\",\n      src: \"\".concat(this.state.categories[id], \".svg\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    })))), React.createElement(Search, {\n      submitSearch: this.submitSearch,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"questions-list\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }, \"Questions\"), this.state.questions.map((q, ind) => React.createElement(Question, {\n      key: q.id,\n      question: q.question,\n      answer: q.answer,\n      category: this.state.categories[q.category],\n      difficulty: q.difficulty,\n      questionAction: this.questionAction(q.id),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"pagination-menu\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    }, this.createPagination())));\n  }\n\n}\n\nexport default QuestionView;","map":{"version":3,"sources":["/home/reneknox/Desktop/trivia/frontend/src/components/QuestionView.js"],"names":["React","Component","Question","Search","$","QuestionView","constructor","getQuestions","ajax","url","state","page","type","success","result","questionsList","Object","keys","total_questions","map","key","Number","categoriesList","categories","setState","questions","totalQuestions","currentCategory","current_category","error","alert","getByCategory","id","submitSearch","searchTerm","dataType","contentType","data","JSON","stringify","xhrFields","withCredentials","crossDomain","questionAction","action","window","confirm","componentDidMount","selectPage","num","createPagination","pageNumbers","maxPage","Math","ceil","i","push","render","q","ind","question","answer","category","difficulty"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n\nimport '../stylesheets/App.css';\nimport Question from './Question';\nimport Search from './Search';\nimport $ from 'jquery';\n\nclass QuestionView extends Component {\n  constructor(){\n    super();\n    this.state = {\n      questions: [],\n      page: 1,\n      totalQuestions: 0,\n      categories: {},\n      currentCategory: null,\n    }\n  }\n\n  componentDidMount() {\n    this.getQuestions();\n  }\n\n  getQuestions = () => {\n    $.ajax({\n      url: `/questions?page=${this.state.page}`, \n      type: \"GET\",\n      success: (result) => {\n        let questionsList = Object.keys(result.total_questions).map((key) => [Number(key), result.total_questions[key]]);\n        let categoriesList = Object.keys(result.categories).map((key) => [Number(key), result.categories[key]]);\n        this.setState({\n          questions: result.questions,\n          totalQuestions: questionsList,\n          categories: categoriesList,\n          currentCategory: result.current_category })\n        return;\n      },\n      error: (error) => {\n        alert('Unable to load questions. Please try your request again')\n        return;\n      }\n    })\n  }\n\n  selectPage(num) {\n    this.setState({page: num}, () => this.getQuestions());\n  }\n\n  createPagination(){\n    let pageNumbers = [];\n    let maxPage = Math.ceil(this.state.totalQuestions / 10)\n    for (let i = 1; i <= maxPage; i++) {\n      pageNumbers.push(\n        <span\n          key={i}\n          className={`page-num ${i === this.state.page ? 'active' : ''}`}\n          onClick={() => {this.selectPage(i)}}>{i}\n        </span>)\n    }\n    return pageNumbers;\n  }\n\n  getByCategory= (id) => {\n    $.ajax({\n      url: `/categories/${id}/questions`, //TODO: update request URL\n      type: \"GET\",\n      success: (result) => {\n        this.setState({\n          questions: result.questions,\n          totalQuestions: result.total_questions,\n          currentCategory: result.current_category })\n        return;\n      },\n      error: (error) => {\n        alert('Unable to load questions. Please try your request again')\n        return;\n      }\n    })\n  }\n\n  submitSearch = (searchTerm) => {\n    $.ajax({\n      url: `/questions`, //TODO: update request URL\n      type: \"POST\",\n      dataType: 'json',\n      contentType: 'application/json',\n      data: JSON.stringify({searchTerm: searchTerm}),\n      xhrFields: {\n        withCredentials: true\n      },\n      crossDomain: true,\n      success: (result) => {\n        this.setState({\n          questions: result.questions,\n          totalQuestions: result.total_questions,\n          currentCategory: result.current_category })\n        return;\n      },\n      error: (error) => {\n        alert('Unable to load questions. Please try your request again')\n        return;\n      }\n    })\n  }\n\n  questionAction = (id) => (action) => {\n    if(action === 'DELETE') {\n      if(window.confirm('are you sure you want to delete the question?')) {\n        $.ajax({\n          url: `/questions/${id}`, //TODO: update request URL\n          type: \"DELETE\",\n          success: (result) => {\n            this.getQuestions();\n          },\n          error: (error) => {\n            alert('Unable to load questions. Please try your request again')\n            return;\n          }\n        })\n      }\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"question-view\">\n        <div className=\"categories-list\">\n          <h2 onClick={() => {this.getQuestions()}}>Categories</h2>\n          <ul>\n            {Object.keys(this.state.categories).map((id, ) => (\n              <li key={id} onClick={() => {this.getByCategory(id)}}>\n                {this.state.categories[id]}\n                <img className=\"category\" src={`${this.state.categories[id]}.svg`}/>\n              </li>\n            ))}\n          </ul>\n          <Search submitSearch={this.submitSearch}/>\n        </div>\n        <div className=\"questions-list\">\n          <h2>Questions</h2>\n          {this.state.questions.map((q, ind) => (\n            <Question\n              key={q.id}\n              question={q.question}\n              answer={q.answer}\n              category={this.state.categories[q.category]} \n              difficulty={q.difficulty}\n              questionAction={this.questionAction(q.id)}\n            />\n          ))}\n          <div className=\"pagination-menu\">\n            {this.createPagination()}\n          </div>\n        </div>\n\n      </div>\n    );\n  }\n}\n\nexport default QuestionView;\n"]},"metadata":{},"sourceType":"module"}